---
description: プロジェクト構造規約
globs: **/*
alwaysApply: true
---
# プロジェクト構造規約

## プロジェクトディレクトリ構造

```
.
├── .github/           # GitHub Actionsのワークフロー定義
├── .vscode/           # VS Codeの設定ファイル
├── apps/              # モノレポの各アプリケーション
│   ├── client/       # フロントエンドアプリケーション
│   └── server/       # バックエンドアプリケーション
├── packages/          # 共有パッケージ
│   ├── config/       # 共有設定（ESLint, TypeScriptなど）
│   ├── tsconfig/     # 共有TypeScript設定
│   └── ui/           # 共有UIコンポーネント
├── docs/              # プロジェクトドキュメント
├── scripts/           # ビルドやデプロイのスクリプト
├── README.md          # プロジェクトの概要説明
├── package.json       # ルートのpackage.json
├── turbo.json         # Turborepoの設定
└── yarn.lock          # 依存関係のロックファイル
```

## フロントエンドのディレクトリ構造

```
./apps/client/
├── public/            # 静的ファイル
├── src/
│   ├── app/          # Next.js App Router
│   ├── components/    # コンポーネント
│   │   ├── common/    # 共通コンポーネント
│   │   ├── features/  # 機能別コンポーネント
│   │   └── layout/    # レイアウト関連
│   ├── hooks/        # カスタムフック
│   ├── lib/          # ユーティリティ関数やライブラリ
│   ├── services/     # APIクライアントやサービスクラス
│   ├── store/        # 状態管理
│   ├── styles/       # グローバルスタイル
│   ├── types/        # 型定義
│   └── utils/        # ユーティリティ関数
├── .eslintrc.js      # ESLint設定
├── .gitignore        # Gitの無視ファイル
├── next.config.js    # Next.js設定
├── package.json      # 依存関係
├── postcss.config.js # PostCSS設定
├── tailwind.config.js # Tailwind CSS設定
└── tsconfig.json     # TypeScript設定
```

## バックエンドのディレクトリ構造

```
./apps/server/
├── src/
│   ├── config/       # 設定ファイル
│   ├── constants/    # 定数
│   ├── controllers/  # コントローラー
│   ├── dtos/         # Data Transfer Objects
│   ├── entities/     # データベースエンティティ
│   ├── exceptions/   # カスタム例外
│   ├── guards/       # 認証・認可のガード
│   ├── interceptors/ # インターセプター
│   ├── interfaces/   # インターフェース
│   ├── middlewares/  # ミドルウェア
│   ├── modules/      # 機能モジュール
│   ├── repositories/ # リポジトリ
│   ├── services/     # サービス
│   ├── utils/        # ユーティリティ
│   └── main.ts       # アプリケーションのエントリーポイント
├── test/             # テストファイル
├── .eslintrc.js       # ESLint設定
├── .gitignore         # Gitの無視ファイル
├── jest.config.js     # Jest設定
├── nest-cli.json      # NestJS CLI設定
├── package.json       # 依存関係
├── prisma/            # Prismaスキーマとマイグレーション
│   ├── schema.prisma # データベーススキーマ
│   └── migrations/   # マイグレーションファイル
└── tsconfig.json      # TypeScript設定
```

## パッケージ構造

- モノレポでプロジェクトを管理し、コードの再利用性を高める
- ワークスペースの管理はTurborepoを使用する
- 共通で使用するコンポーネントやユーティリティはpackagesディレクトリに配置する

## モジュール設計

- フロントエンドは機能ベース（Feature-based）にフォルダを構成する
- バックエンドはNestJSのモジュールパターンに従って構成する
- 各機能モジュールは独立してテスト可能な形で実装する 