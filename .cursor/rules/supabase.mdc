---
description: rules for Supabase integration
globs: src/lib/supabase/**/*.ts, src/middleware.ts", "src/utils/supabase/**/*.ts
alwaysApply: false
---
 # supabase

## Supabase Usage
- Supabase is used for authentication, database, and storage
- Client connections are handled through src/lib/supabase/
- Environment variables are configured in .env

## Authentication
- Use supabase.auth.getUser() to get the authenticated user (NOT supabase.auth.getSession())
- Session retrieval with supabase.auth.getSession() is acceptable
- Middleware uses updateSession from @/utils/supabase/middleware for cookie refreshes
- Authentication UI components are in src/components/auth/

## Client Initialization
- For browser (client-side), use createBrowserClient from src/lib/supabase/createBrowserClient.ts
- For server-side, use createServerClient from src/lib/supabase/createServerClient.ts
- For service operations, use createServiceClient from src/lib/supabase/createServiceClient.ts

## Data Access Patterns
- Use Row Level Security (RLS) for data protection
- Consider using Supabase's realtime features for live updates
- Handle errors properly with try/catch blocks
- For file storage, use the Supabase Storage API

## Security Considerations
- Always respect RLS policies
- Never expose sensitive environment variables to the client
- Handle authentication state properly
- Validate user permissions before performing operations