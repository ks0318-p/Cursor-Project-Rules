---
description: デバッグ規約
globs: **/*.{ts,tsx,js,jsx}
alwaysApply: true
---
# デバッグ規約

## ログ出力

### フロントエンド

- プロダクション環境での `console.log` の使用は原則禁止
- デバッグ用には出力レベルを制御できるロギングライブラリを使用する

```typescript
// Logger.ts
export enum LogLevel {
  DEBUG,
  INFO,
  WARN,
  ERROR
}

let currentLogLevel = process.env.NODE_ENV === 'production' 
  ? LogLevel.ERROR 
  : LogLevel.DEBUG;

export const Logger = {
  setLogLevel: (level: LogLevel) => {
    currentLogLevel = level;
  },
  debug: (message: string, ...args: any[]) => {
    if (currentLogLevel <= LogLevel.DEBUG) {
      console.log(`[DEBUG] ${message}`, ...args);
    }
  },
  info: (message: string, ...args: any[]) => {
    if (currentLogLevel <= LogLevel.INFO) {
      console.info(`[INFO] ${message}`, ...args);
    }
  },
  warn: (message: string, ...args: any[]) => {
    if (currentLogLevel <= LogLevel.WARN) {
      console.warn(`[WARN] ${message}`, ...args);
    }
  },
  error: (message: string, ...args: any[]) => {
    if (currentLogLevel <= LogLevel.ERROR) {
      console.error(`[ERROR] ${message}`, ...args);
    }
  }
};
```

### バックエンド

- NestJSのロガーを使用して構造化されたログを出力する
- Winstonなどのロギングライブラリと統合する

## デバッグツール

### フロントエンド

- Chrome DevTools
- React Developer Tools
- Redux DevTools（状態管理にReduxを使用する場合）

### バックエンド

- VS Codeのデバッガ機能
- PostmanやInsomniaでAPIをテスト

## エラーハンドリング

### フロントエンド

- グローバルエラーハンドラーを使用して予期しないエラーを捕捉する
- デバッグのために全てのエラーをSentryなどのエラートラッキングサービスに送信する

```typescript
// ErrorBoundary.tsx
import React, { ErrorInfo } from 'react';
import { Logger } from './Logger';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    Logger.error('UIエラーが発生しました', { error, errorInfo });
    // ここでSentryなどにエラーを送信する
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || <div>エラーが発生しました。ページを再読み込みしてください。</div>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```

### バックエンド

- 例外フィルターを使用して、適切なエラーレスポンスを返す
- エラーの文脈やスタックトレースをログに記録する 