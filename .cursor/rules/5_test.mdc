---
description: テスト規約
globs: **/*.{test,spec}.{ts,tsx,js,jsx}
alwaysApply: true
---
# テスト規約

## テストの種類

### ユニットテスト
- 個々の関数やコンポーネントが意図した単体で動作することを検証する
- フロントエンド: React Testing Library + Vitest
- バックエンド: Jest

### 統合テスト
- 複数のコンポーネントやモジュールが連携して正しく動作することを検証する
- バックエンド: SuperTest

### E2Eテスト
- アプリケーション全体の流れを検証する
- Playwrightを使用する

## テストファイルの命名規則

- ユニットテスト: `[filename].test.ts`
- 統合テスト: `[filename].integration.test.ts`
- E2Eテスト: `[feature].spec.ts`

## テストの構造

### AAAパターンの採用
テストはArrange-Act-Assertパターンに従って書くことを推奨する

```typescript
describe('UserService', () => {
  it('should create a user successfully', async () => {
    // Arrange - テストに必要な初期化やセットアップ
    const userData = {
      name: 'Test User',
      email: 'test@example.com',
      password: 'password123'
    };
    const userService = new UserService();

    // Act - テスト対象の処理を実行
    const result = await userService.createUser(userData);

    // Assert - 結果を検証
    expect(result).toHaveProperty('id');
    expect(result.name).toEqual(userData.name);
    expect(result.email).toEqual(userData.email);
  });
});
```

## モックとスタブ

- 外部依存関係（API、データベース等）はモック化する
- モックにはVitestインバイトされたモック機能やJestを使用する
- 複雑なモックは専用のモックファイルに分離する

## テストカバレッジ

- ユニットテストのカバレッジ目標: 80%以上
- 新機能の実装時は必ずテストも同時に実装する
- CI/CDパイプラインでテストカバレッジレポートを生成する 